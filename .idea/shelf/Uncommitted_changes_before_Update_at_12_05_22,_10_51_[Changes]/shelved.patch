Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"7314eab0-8495-49ba-9a18-3bd26c4de350\" name=\"Changes\" comment=\"Kathegorie seite angefangen\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"dev\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"PackageJsonUpdateNotifier\">\n    <dismissed value=\"$PROJECT_DIR$/frontend/package.json\" />\n  </component>\n  <component name=\"ProjectId\" id=\"26Bsgnp9h3sWN6AJXYXLTJxF9jr\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"ts.external.directory.path\" value=\"$PROJECT_DIR$/frontend/node_modules/typescript/lib\" />\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"7314eab0-8495-49ba-9a18-3bd26c4de350\" name=\"Changes\" comment=\"\" />\n      <created>1646908427771</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1646908427771</updated>\n      <workItem from=\"1646908430489\" duration=\"699000\" />\n      <workItem from=\"1646917244023\" duration=\"13000\" />\n      <workItem from=\"1647020476297\" duration=\"122000\" />\n      <workItem from=\"1648716556301\" duration=\"1229000\" />\n      <workItem from=\"1651041469992\" duration=\"467000\" />\n      <workItem from=\"1651042139689\" duration=\"10000\" />\n      <workItem from=\"1651133598993\" duration=\"450000\" />\n      <workItem from=\"1652249401406\" duration=\"4531000\" />\n      <workItem from=\"1652261704251\" duration=\"47000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Edit Login .css\">\n      <created>1648717419214</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1648717419214</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Mein Konto überarbeitet\">\n      <created>1651140772801</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1651140772801</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Mein Konto überarbeitet\">\n      <created>1651140787608</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1651140787608</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Passwort ändern/ Konto anzeigen/ Konto bearbeiten\">\n      <created>1651745556368</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1651745556368</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"feature/ui-and-api-calls\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Edit Login .css\" />\n    <MESSAGE value=\"Mein Konto überarbeitet\" />\n    <MESSAGE value=\"Passwort ändern/ Konto anzeigen/ Konto bearbeiten\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Passwort ändern/ Konto anzeigen/ Konto bearbeiten\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/.idea/workspace.xml	(date 1652345229911)
@@ -1,7 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="7314eab0-8495-49ba-9a18-3bd26c4de350" name="Changes" comment="Kathegorie seite angefangen" />
+    <list default="true" id="7314eab0-8495-49ba-9a18-3bd26c4de350" name="Changes" comment="invite">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -83,7 +85,14 @@
       <option name="project" value="LOCAL" />
       <updated>1651745556368</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="invite">
+      <created>1652344802976</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1652344802976</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -116,6 +125,7 @@
     <MESSAGE value="Edit Login .css" />
     <MESSAGE value="Mein Konto überarbeitet" />
     <MESSAGE value="Passwort ändern/ Konto anzeigen/ Konto bearbeiten" />
-    <option name="LAST_COMMIT_MESSAGE" value="Passwort ändern/ Konto anzeigen/ Konto bearbeiten" />
+    <MESSAGE value="invite" />
+    <option name="LAST_COMMIT_MESSAGE" value="invite" />
   </component>
 </project>
\ No newline at end of file
Index: backend/src/main/java/de/szut/backend/dto/SecurityQuestionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/SecurityQuestionDto.java b/backend/src/main/java/de/szut/backend/dto/SecurityQuestionDto.java
new file mode 100644
--- /dev/null	(date 1652345393710)
+++ b/backend/src/main/java/de/szut/backend/dto/SecurityQuestionDto.java	(date 1652345393710)
@@ -0,0 +1,9 @@
+package de.szut.backend.dto;
+
+import lombok.Data;
+
+@Data
+public class SecurityQuestionDto {
+    private long id;
+    private String SecurityQuestionKey;
+}
Index: backend/src/main/java/de/szut/backend/dto/GroupDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/GroupDto.java b/backend/src/main/java/de/szut/backend/dto/GroupDto.java
new file mode 100644
--- /dev/null	(date 1652345393709)
+++ b/backend/src/main/java/de/szut/backend/dto/GroupDto.java	(date 1652345393709)
@@ -0,0 +1,10 @@
+package de.szut.backend.dto;
+
+import lombok.Data;
+
+@Data
+public class GroupDto {
+    private long id;
+    private String groupName;
+    private String image;
+}
Index: backend/src/main/java/de/szut/backend/exceptions/GroupNotExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/exceptions/GroupNotExistsException.java b/backend/src/main/java/de/szut/backend/exceptions/GroupNotExistsException.java
new file mode 100644
--- /dev/null	(date 1652345393711)
+++ b/backend/src/main/java/de/szut/backend/exceptions/GroupNotExistsException.java	(date 1652345393711)
@@ -0,0 +1,8 @@
+package de.szut.backend.exceptions;
+
+public class GroupNotExistsException extends Exception {
+    String message;
+    public GroupNotExistsException(String _message) {
+        message = _message;
+    }
+}
Index: backend/src/main/java/de/szut/backend/dto/AddSecurityQuestionDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/AddSecurityQuestionDto.java b/backend/src/main/java/de/szut/backend/dto/AddSecurityQuestionDto.java
new file mode 100644
--- /dev/null	(date 1652345393708)
+++ b/backend/src/main/java/de/szut/backend/dto/AddSecurityQuestionDto.java	(date 1652345393708)
@@ -0,0 +1,8 @@
+package de.szut.backend.dto;
+
+import lombok.Data;
+
+@Data
+public class AddSecurityQuestionDto {
+    public String key;
+}
Index: backend/src/main/java/de/szut/backend/model/SecurityQuestion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/SecurityQuestion.java b/backend/src/main/java/de/szut/backend/model/SecurityQuestion.java
new file mode 100644
--- /dev/null	(date 1652345393723)
+++ b/backend/src/main/java/de/szut/backend/model/SecurityQuestion.java	(date 1652345393723)
@@ -0,0 +1,16 @@
+package de.szut.backend.model;
+
+import lombok.Data;
+
+import javax.persistence.*;
+
+@Data
+@Entity
+@Table(name="security")
+public class SecurityQuestion {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private long id;
+    private String key;
+}
+
Index: frontend/src/app/component/main-view/main-view.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { GroupModule } from 'src/app/model/group/group.module';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CreateGroupViewComponent } from '../create-group-view/create-group-view.component';\nimport { GroupService } from 'src/app/service/group/group.service';\nimport { Observable, of } from 'rxjs';\nimport { AppModule } from 'src/app/app.module';\n\n@Component({\n  selector: 'app-main-view',\n  templateUrl: './main-view.component.html',\n  styleUrls: ['./main-view.component.css']\n})\nexport class MainViewComponent implements OnInit {\n\n  //userGroups$ : Observable<GroupModule[]> = of([]);\n  image: string;\n  groups: GroupModule[] = []\n  constructor(public router: Router, public dialog: MatDialog, public groupService: GroupService, public app: AppModule) {\n    //this.getGroupsByUserId();\n    this.groups.push(new GroupModule(1, 'Test', this.image));\n  }\n\n  getGroupsByUserId(): void {\n    this.groupService.getGroupsByUser(this.app.userId);\n  }\n\n  createGroupDialog(): void {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    this.dialog.open(CreateGroupViewComponent, dialogConfig);\n  }\n\n  openGroup(groupId: number): void {\n    this.groupService.getGroupById(groupId).subscribe(data => this.router.navigate(['/group', data]));\n  }\n\n  ngOnInit(): void {\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/component/main-view/main-view.component.ts b/frontend/src/app/component/main-view/main-view.component.ts
--- a/frontend/src/app/component/main-view/main-view.component.ts	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/frontend/src/app/component/main-view/main-view.component.ts	(date 1652345393743)
@@ -19,7 +19,7 @@
   groups: GroupModule[] = []
   constructor(public router: Router, public dialog: MatDialog, public groupService: GroupService, public app: AppModule) {
     //this.getGroupsByUserId();
-    this.groups.push(new GroupModule(1, 'Test', this.image));
+    this.groups.push(new GroupModule(1, 'Test', null));
   }
 
   getGroupsByUserId(): void {
Index: backend/src/main/java/de/szut/backend/dto/GroupListDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.dto;\n\npublic class GroupListDto {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/GroupListDto.java b/backend/src/main/java/de/szut/backend/dto/GroupListDto.java
--- a/backend/src/main/java/de/szut/backend/dto/GroupListDto.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/dto/GroupListDto.java	(date 1652345393710)
@@ -1,4 +1,7 @@
 package de.szut.backend.dto;
 
+import java.util.List;
+
 public class GroupListDto {
+    public List<GroupDto> groups;
 }
Index: backend/src/main/java/de/szut/backend/controller/HistoryLogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.controller;\n\nimport com.google.gson.Gson;\nimport de.szut.backend.model.History.HistoryLogEntry;\nimport de.szut.backend.service.HistoryLogService;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@CrossOrigin\n@RestController\n@RequestMapping(value = \"/api/v1/history\")\npublic class HistoryLogController {\n    private HistoryLogService historyLogService;\n\n    public HistoryLogController(HistoryLogService historyLogService) {\n        this.historyLogService = historyLogService;\n    }\n\n    @GetMapping(path = \"/entries/{groupId}\", produces = \"application/json\")\n    public String GetUser(@PathVariable long groupId) {\n        List<HistoryLogEntry> historyLog = this.historyLogService.getAllLogEntriesForGroup(groupId);\n        Gson gson = new Gson();\n        return gson.toJson(historyLog);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/controller/HistoryLogController.java b/backend/src/main/java/de/szut/backend/controller/HistoryLogController.java
--- a/backend/src/main/java/de/szut/backend/controller/HistoryLogController.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/controller/HistoryLogController.java	(date 1652345393707)
@@ -18,7 +18,7 @@
     }
 
     @GetMapping(path = "/entries/{groupId}", produces = "application/json")
-    public String GetUser(@PathVariable long groupId) {
+    public String GetAllHistoryEntriesForGroup(@PathVariable long groupId) {
         List<HistoryLogEntry> historyLog = this.historyLogService.getAllLogEntriesForGroup(groupId);
         Gson gson = new Gson();
         return gson.toJson(historyLog);
Index: backend/src/main/java/de/szut/backend/dto/ForgotDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.dto;\n\nimport de.szut.backend.model.Question;\nimport lombok.Data;\nimport lombok.NonNull;\n\n@Data\npublic class ForgotDto {\n    @NonNull\n    public String email;\n    @NonNull\n    public String hash;\n    @NonNull\n    public Question securityQuestion;\n    @NonNull\n    public String securityAnswer;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/ForgotDto.java b/backend/src/main/java/de/szut/backend/dto/ForgotDto.java
--- a/backend/src/main/java/de/szut/backend/dto/ForgotDto.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/dto/ForgotDto.java	(date 1652345393709)
@@ -1,6 +1,6 @@
 package de.szut.backend.dto;
 
-import de.szut.backend.model.Question;
+import de.szut.backend.model.SecurityQuestion;
 import lombok.Data;
 import lombok.NonNull;
 
@@ -11,7 +11,7 @@
     @NonNull
     public String hash;
     @NonNull
-    public Question securityQuestion;
+    public String securityQuestionKey;
     @NonNull
     public String securityAnswer;
 
Index: backend/src/main/java/de/szut/backend/model/Group.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.model;\n\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n@Entity\n@Table(name=\"groups\")\npublic class Group {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    public long id;\n    public String groupName;\n    public long ImageId;\n    @CreationTimestamp\n    public Date created;\n    @UpdateTimestamp\n    public Date lastUpdate;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Group.java b/backend/src/main/java/de/szut/backend/model/Group.java
--- a/backend/src/main/java/de/szut/backend/model/Group.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/model/Group.java	(date 1652345393722)
@@ -13,7 +13,7 @@
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     public long id;
     public String groupName;
-    public long ImageId;
+    public long imageId;
     @CreationTimestamp
     public Date created;
     @UpdateTimestamp
Index: backend/src/main/java/de/szut/backend/repository/CategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/repository/CategoryRepository.java b/backend/src/main/java/de/szut/backend/repository/CategoryRepository.java
new file mode 100644
--- /dev/null	(date 1652345393724)
+++ b/backend/src/main/java/de/szut/backend/repository/CategoryRepository.java	(date 1652345393724)
@@ -0,0 +1,13 @@
+package de.szut.backend.repository;
+
+import de.szut.backend.model.Categorys.Category;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface CategoryRepository extends JpaRepository<Category,Long> {
+    List<Category> findAllByGroupId(long groupId);
+    Category findCategoryByNameAndGroupId(String name, long groupId);
+}
Index: backend/src/main/java/de/szut/backend/controller/ExpensesController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/controller/ExpensesController.java b/backend/src/main/java/de/szut/backend/controller/ExpensesController.java
new file mode 100644
--- /dev/null	(date 1652345393703)
+++ b/backend/src/main/java/de/szut/backend/controller/ExpensesController.java	(date 1652345393703)
@@ -0,0 +1,72 @@
+package de.szut.backend.controller;
+
+import com.google.gson.Gson;
+import de.szut.backend.mapper.ExpensesMapper;
+import de.szut.backend.model.Expenses.dtos.CreateExpenseDTO;
+import de.szut.backend.model.Expenses.dtos.GetExpenseDTO;
+import de.szut.backend.service.ExpensesService;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.ArrayList;
+
+@CrossOrigin
+@RestController
+@RequestMapping(value = "/api/v1/expenses")
+public class ExpensesController {
+    private ExpensesService ex_Service;
+    private ExpensesMapper ex_Mapper;
+    
+    public ExpensesController(ExpensesService ex_Service, ExpensesMapper ex_Mapper){
+        this.ex_Service = ex_Service;
+        this.ex_Mapper = ex_Mapper;
+    }
+
+    @PostMapping(path = "/expense", produces = "application/json")
+    public String createCategory(@RequestBody CreateExpenseDTO expenseDTO) {
+        GetExpenseDTO getDTO = this.ex_Mapper.mapExpenseToGetExpenseDto(this.ex_Service.createExpense(this.ex_Mapper.mapCreateExpensesDtoToExpense(expenseDTO)));
+        Gson gson = new Gson();
+        return gson.toJson(getDTO);
+    }
+
+    @DeleteMapping(path = "/expense/{expenseId}", produces = "application/json")
+    public void deleteCategory(@PathVariable long expenseId) {
+        this.ex_Service.deleteExpenseById(expenseId);
+    }
+
+    @GetMapping(path = "/expense/{expenseId}", produces = "application/json")
+    public String getExpenseById(@PathVariable long expenseId){
+        GetExpenseDTO getDTO = this.ex_Mapper.mapExpenseToGetExpenseDto(this.ex_Service.getExpenseById(expenseId));
+        Gson gson = new Gson();
+        return gson.toJson(getDTO);
+    }
+
+    @GetMapping(path = "/group/{groupId}", produces = "application/json")
+    public String getExpensesByGroupId(@PathVariable long groupId){
+        ArrayList<GetExpenseDTO> result = new ArrayList<>();
+        for(var ex : this.ex_Service.getAllExpensesByGroupId(groupId)){
+            result.add(this.ex_Mapper.mapExpenseToGetExpenseDto(ex));
+        }
+        Gson gson = new Gson();
+        return gson.toJson(result);
+    }
+
+    @GetMapping(path = "/category/{categoryId}", produces = "application/json")
+    public String getExpensesByCategoryId(@PathVariable long categoryId){
+        ArrayList<GetExpenseDTO> result = new ArrayList<>();
+        for(var ex : this.ex_Service.getAllExpensesByCategoryId(categoryId)){
+            result.add(this.ex_Mapper.mapExpenseToGetExpenseDto(ex));
+        }
+        Gson gson = new Gson();
+        return gson.toJson(result);
+    }
+
+    @GetMapping(path = "/user/{userId}", produces = "application/json")
+    public String getExpensesByUserId(@PathVariable long userId){
+        ArrayList<GetExpenseDTO> result = new ArrayList<>();
+        for(var ex : this.ex_Service.getAllExpensesByUserId(userId)){
+            result.add(this.ex_Mapper.mapExpenseToGetExpenseDto(ex));
+        }
+        Gson gson = new Gson();
+        return gson.toJson(result);
+    }
+}
Index: backend/src/main/java/de/szut/backend/mapper/UserMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.mapper;\n\n\nimport de.szut.backend.dto.CreateUserDto;\nimport de.szut.backend.dto.ForgotBackDto;\nimport de.szut.backend.dto.LoginDto;\nimport de.szut.backend.dto.RegisterDto;\nimport de.szut.backend.model.*;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\nimport java.util.Locale;\n\n@Service\npublic class UserMapper {\n    public User mapRegisterDtoToUser(RegisterDto dto) {\n        User user = new User();\n        user.email = dto.email;\n        user.firstName = dto.firstName;\n        user.lastName = dto.lastName;\n        user.lastLogin = new Date();\n        user.hash = dto.hash;\n        user.securityQuestion = dto.securityQuestion;\n        user.securityAnswer = dto.securityAnswer.toLowerCase(Locale.ROOT);\n        return user;\n    }\n\n    public User mapLoginDtoToUser(LoginDto dto) {\n        User user = new User();\n        user.email = dto.email;\n        user.hash = dto.hash;\n        user.lastLogin = new Date();\n        return user;\n    }\n\n    public CreateUserDto mapUserToUserCreateDto(User user) {\n        CreateUserDto dto = new CreateUserDto();\n        dto.email = user.email;\n        dto.id = user.id;\n        dto.firstName = user.firstName;\n        dto.lastName = user.lastName;\n        return dto;\n    }\n\n    public ForgotBackDto mapUserToForgotBackDto(User user) {\n        ForgotBackDto dto = new ForgotBackDto();\n        dto.status = \"Success\";\n        dto.id = user.id;\n        return dto;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/mapper/UserMapper.java b/backend/src/main/java/de/szut/backend/mapper/UserMapper.java
--- a/backend/src/main/java/de/szut/backend/mapper/UserMapper.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/mapper/UserMapper.java	(date 1652345393718)
@@ -6,6 +6,7 @@
 import de.szut.backend.dto.LoginDto;
 import de.szut.backend.dto.RegisterDto;
 import de.szut.backend.model.*;
+import de.szut.backend.repository.SecurityQuestionRepository;
 import org.springframework.stereotype.Service;
 
 import java.util.Date;
@@ -13,6 +14,10 @@
 
 @Service
 public class UserMapper {
+    final SecurityQuestionRepository securityQuestionRepository;
+    public UserMapper(SecurityQuestionRepository _repo) {
+        this.securityQuestionRepository = _repo;
+    }
     public User mapRegisterDtoToUser(RegisterDto dto) {
         User user = new User();
         user.email = dto.email;
@@ -20,8 +25,9 @@
         user.lastName = dto.lastName;
         user.lastLogin = new Date();
         user.hash = dto.hash;
-        user.securityQuestion = dto.securityQuestion;
+        user.securityQuestionId = this.securityQuestionRepository.findByKey(dto.securityQuestionKey).getId();
         user.securityAnswer = dto.securityAnswer.toLowerCase(Locale.ROOT);
+        user.imageId = 0;
         return user;
     }
 
Index: backend/src/main/java/de/szut/backend/repository/ExpensesRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/repository/ExpensesRepository.java b/backend/src/main/java/de/szut/backend/repository/ExpensesRepository.java
new file mode 100644
--- /dev/null	(date 1652345393725)
+++ b/backend/src/main/java/de/szut/backend/repository/ExpensesRepository.java	(date 1652345393725)
@@ -0,0 +1,13 @@
+package de.szut.backend.repository;
+
+import de.szut.backend.model.Expenses.Expense;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface ExpensesRepository extends JpaRepository<Expense,Long> {
+    List<Expense> findAllByGroupId(long groupId);
+    List<Expense> findAllByUserId(long userId);
+    List<Expense> findAllByCategoryId(long categoryId);
+    Expense findExpenseByGroupIdAndCategoryIdAndUserId(long groupId, long categoryId, long userId);
+}
Index: backend/src/main/java/de/szut/backend/dto/RegisterDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.dto;\n\nimport com.sun.istack.NotNull;\nimport de.szut.backend.model.Question;\nimport lombok.Data;\n\nimport java.util.AbstractMap;\nimport java.util.Locale;\n\n@Data\npublic class RegisterDto {\n    @NotNull\n    public String firstName;\n    @NotNull\n    public String lastName;\n    @NotNull\n    public String hash;\n    @NotNull\n    public String email;\n    @NotNull\n    public Question securityQuestion;\n    @NotNull\n    public String securityAnswer;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/dto/RegisterDto.java b/backend/src/main/java/de/szut/backend/dto/RegisterDto.java
--- a/backend/src/main/java/de/szut/backend/dto/RegisterDto.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/dto/RegisterDto.java	(date 1652345393710)
@@ -1,12 +1,9 @@
 package de.szut.backend.dto;
 
 import com.sun.istack.NotNull;
-import de.szut.backend.model.Question;
+import de.szut.backend.model.SecurityQuestion;
 import lombok.Data;
 
-import java.util.AbstractMap;
-import java.util.Locale;
-
 @Data
 public class RegisterDto {
     @NotNull
@@ -18,7 +15,9 @@
     @NotNull
     public String email;
     @NotNull
-    public Question securityQuestion;
+    public String securityQuestionKey;
     @NotNull
     public String securityAnswer;
+
+    public String image;
 }
Index: backend/src/main/java/de/szut/backend/repository/SecurityQuestionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/repository/SecurityQuestionRepository.java b/backend/src/main/java/de/szut/backend/repository/SecurityQuestionRepository.java
new file mode 100644
--- /dev/null	(date 1652345393726)
+++ b/backend/src/main/java/de/szut/backend/repository/SecurityQuestionRepository.java	(date 1652345393726)
@@ -0,0 +1,9 @@
+package de.szut.backend.repository;
+
+import de.szut.backend.model.SecurityQuestion;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface SecurityQuestionRepository extends JpaRepository<SecurityQuestion, Long> {
+    SecurityQuestion findByKey(String key);
+    boolean existsByKey(String key);
+}
Index: backend/src/main/java/de/szut/backend/mapper/CategoryMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/mapper/CategoryMapper.java b/backend/src/main/java/de/szut/backend/mapper/CategoryMapper.java
new file mode 100644
--- /dev/null	(date 1652345393711)
+++ b/backend/src/main/java/de/szut/backend/mapper/CategoryMapper.java	(date 1652345393711)
@@ -0,0 +1,26 @@
+package de.szut.backend.mapper;
+
+import de.szut.backend.model.Categorys.Category;
+import de.szut.backend.model.Categorys.dtos.CreateCategoryDTO;
+import de.szut.backend.model.Categorys.dtos.GetCategoryDTO;
+import org.springframework.stereotype.Service;
+
+@Service
+public class CategoryMapper {
+
+    public Category mapCreateCategoryDtoToCategory(CreateCategoryDTO dtoToMap){
+        Category category = new Category();
+
+        category.setName(dtoToMap.getName());
+        category.setGroupId((dtoToMap.getGroupId()));
+        return category;
+    }
+
+    public GetCategoryDTO mapCategoryToGetCategoryDto(Category categoryToMap){
+        GetCategoryDTO categoryDto = new GetCategoryDTO();
+
+        categoryDto.setName(categoryToMap.getName());
+        categoryDto.setDate_Created(categoryToMap.getDate_Created());
+        return categoryDto;
+    }
+}
Index: backend/src/main/java/de/szut/backend/service/CategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/CategoryService.java b/backend/src/main/java/de/szut/backend/service/CategoryService.java
new file mode 100644
--- /dev/null	(date 1652345393728)
+++ b/backend/src/main/java/de/szut/backend/service/CategoryService.java	(date 1652345393728)
@@ -0,0 +1,40 @@
+package de.szut.backend.service;
+
+import de.szut.backend.model.Categorys.Category;
+import de.szut.backend.repository.CategoryRepository;
+import org.springframework.stereotype.Service;
+import java.util.List;
+
+@Service
+public class CategoryService {
+    private CategoryRepository c_Repository;
+
+    public CategoryService(CategoryRepository c_Repository){
+        this.c_Repository = c_Repository;
+    }
+
+    public Category createCategory(Category categoryToCreate){
+        var inDB = getCategoryByNameAndGroup(categoryToCreate.getName(), categoryToCreate.getGroupId());
+        if(inDB != null){
+            return inDB;
+        }
+        else
+            return this.c_Repository.save(categoryToCreate);
+    }
+
+    public void deleteCategoryById(long categoryId){
+        this.c_Repository.deleteById(categoryId);
+    }
+
+    public Category getCategoryById(long categoryId){
+        return this.c_Repository.findById(categoryId).get();
+    }
+
+    public List<Category> getAllCategoriesForGroup(long groupId){
+        return this.c_Repository.findAllByGroupId(groupId);
+    }
+
+    private Category getCategoryByNameAndGroup(String name, long groupId){
+        return this.c_Repository.findCategoryByNameAndGroupId(name, groupId);
+    }
+}
Index: backend/src/main/java/de/szut/backend/mapper/ExpensesMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/mapper/ExpensesMapper.java b/backend/src/main/java/de/szut/backend/mapper/ExpensesMapper.java
new file mode 100644
--- /dev/null	(date 1652345393716)
+++ b/backend/src/main/java/de/szut/backend/mapper/ExpensesMapper.java	(date 1652345393716)
@@ -0,0 +1,31 @@
+package de.szut.backend.mapper;
+
+import de.szut.backend.model.Expenses.Expense;
+import de.szut.backend.model.Expenses.dtos.CreateExpenseDTO;
+import de.szut.backend.model.Expenses.dtos.GetExpenseDTO;
+import org.springframework.stereotype.Service;
+
+@Service
+public class ExpensesMapper {
+
+    public Expense mapCreateExpensesDtoToExpense(CreateExpenseDTO DTOToCreate){
+        Expense toCreate = new Expense();
+        toCreate.setGroupId(DTOToCreate.getGroupId());
+        toCreate.setUserId(DTOToCreate.getUserId());
+        toCreate.setAmount(DTOToCreate.getAmount());
+        toCreate.setCategoryId(DTOToCreate.getCategoryId());
+        toCreate.setDescription(DTOToCreate.getDescription());
+        return toCreate;
+    }
+
+    public GetExpenseDTO mapExpenseToGetExpenseDto(Expense ExpenseToGet){
+        GetExpenseDTO dtoToGet = new GetExpenseDTO();
+        dtoToGet.setGroupId(ExpenseToGet.getGroupId());
+        dtoToGet.setUserId(ExpenseToGet.getUserId());
+        dtoToGet.setAmount(ExpenseToGet.getAmount());
+        dtoToGet.setCategoryId(ExpenseToGet.getCategoryId());
+        dtoToGet.setDate_Created(ExpenseToGet.getDate_Created());
+        dtoToGet.setDescription(ExpenseToGet.getDescription());
+        return dtoToGet;
+    }
+}
Index: backend/src/main/java/de/szut/backend/repository/GroupXUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.repository;\n\nimport de.szut.backend.model.Group;\nimport de.szut.backend.model.GroupXUser;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.ArrayList;\n\npublic interface GroupXUserRepository extends JpaRepository<GroupXUser, Long> {\n    ArrayList<GroupXUser> findAllByGroupId(Long groupId);\n    boolean existsGroupXUserByUserIdAndGroupId(long userId, long groupId);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/repository/GroupXUserRepository.java b/backend/src/main/java/de/szut/backend/repository/GroupXUserRepository.java
--- a/backend/src/main/java/de/szut/backend/repository/GroupXUserRepository.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/repository/GroupXUserRepository.java	(date 1652345393725)
@@ -9,4 +9,5 @@
 public interface GroupXUserRepository extends JpaRepository<GroupXUser, Long> {
     ArrayList<GroupXUser> findAllByGroupId(Long groupId);
     boolean existsGroupXUserByUserIdAndGroupId(long userId, long groupId);
+    ArrayList<GroupXUser> findAllByUserId(Long userId);
 }
Index: backend/src/main/java/de/szut/backend/mapper/SecurityQuestionMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/mapper/SecurityQuestionMapper.java b/backend/src/main/java/de/szut/backend/mapper/SecurityQuestionMapper.java
new file mode 100644
--- /dev/null	(date 1652345393717)
+++ b/backend/src/main/java/de/szut/backend/mapper/SecurityQuestionMapper.java	(date 1652345393717)
@@ -0,0 +1,22 @@
+package de.szut.backend.mapper;
+
+import de.szut.backend.dto.AddSecurityQuestionDto;
+import de.szut.backend.dto.SecurityQuestionDto;
+import de.szut.backend.model.SecurityQuestion;
+import org.springframework.stereotype.Service;
+
+@Service
+public class SecurityQuestionMapper {
+    public SecurityQuestionDto mapSecurityQuestionToSecurityQuestionDto(SecurityQuestion securityQuestion) {
+        SecurityQuestionDto dto = new SecurityQuestionDto();
+        dto.setId(securityQuestion.getId());
+        dto.setSecurityQuestionKey(securityQuestion.getKey());
+        return dto;
+    }
+
+    public SecurityQuestion mapAddSecurityQuestionDtoToSecurityQuestion(AddSecurityQuestionDto dto) {
+        SecurityQuestion question = new SecurityQuestion();
+        question.setKey(dto.key);
+        return question;
+    }
+}
Index: backend/src/main/java/de/szut/backend/controller/CategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/controller/CategoryController.java b/backend/src/main/java/de/szut/backend/controller/CategoryController.java
new file mode 100644
--- /dev/null	(date 1652345393702)
+++ b/backend/src/main/java/de/szut/backend/controller/CategoryController.java	(date 1652345393702)
@@ -0,0 +1,54 @@
+package de.szut.backend.controller;
+
+import com.google.gson.Gson;
+import de.szut.backend.mapper.CategoryMapper;
+import de.szut.backend.model.Categorys.Category;
+import de.szut.backend.model.Categorys.dtos.CreateCategoryDTO;
+import de.szut.backend.model.Categorys.dtos.GetCategoryDTO;
+import de.szut.backend.service.CategoryService;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@CrossOrigin
+@RestController
+@RequestMapping(value = "/api/v1/categories")
+public class CategoryController {
+    private CategoryService c_Service;
+    private CategoryMapper c_Mapper;
+    public CategoryController(CategoryService c_Service, CategoryMapper c_Mapper){
+        this.c_Service = c_Service;
+        this.c_Mapper = c_Mapper;
+    }
+
+    @PostMapping(path = "/category", produces = "application/json")
+    public String createCategory(@RequestBody CreateCategoryDTO categoryDTO) {
+        GetCategoryDTO getDTO = this.c_Mapper.mapCategoryToGetCategoryDto(this.c_Service.createCategory(this.c_Mapper.mapCreateCategoryDtoToCategory(categoryDTO)));
+        Gson gson = new Gson();
+        return gson.toJson(getDTO);
+    }
+
+    @DeleteMapping(path = "/category/{categoryId}", produces = "application/json")
+    public void deleteCategory(@PathVariable long categoryId) {
+        this.c_Service.deleteCategoryById(categoryId);
+    }
+
+    @GetMapping(path = "/category/{categoryId}", produces = "application/json")
+    public String getCategoryById(@PathVariable long categoryId) {
+        GetCategoryDTO toGet = this.c_Mapper.mapCategoryToGetCategoryDto(this.c_Service.getCategoryById(categoryId));
+        Gson gson = new Gson();
+        return gson.toJson(toGet);
+    }
+
+    @GetMapping(path = "/categories/{groupId}", produces = "application/json")
+    public String getAllCategoriesForGroup(@PathVariable long groupId) {
+        List<Category> toGet = this.c_Service.getAllCategoriesForGroup(groupId);
+        ArrayList<GetCategoryDTO> resultSet = new ArrayList<>();
+        for(var c : toGet){
+            resultSet.add(this.c_Mapper.mapCategoryToGetCategoryDto(c));
+        }
+        Gson gson = new Gson();
+        return gson.toJson(resultSet);
+    }
+}
Index: backend/src/main/java/de/szut/backend/controller/GroupController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.controller;\n\nimport de.szut.backend.dto.GroupCreateDto;\nimport de.szut.backend.dto.GroupListDto;\nimport de.szut.backend.dto.LoginDto;\nimport de.szut.backend.dto.UserToGroupDto;\nimport de.szut.backend.model.Group;\nimport de.szut.backend.model.GroupXUser;\nimport de.szut.backend.model.User;\nimport de.szut.backend.service.GroupService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.logging.Logger;\n\n@CrossOrigin\n@RequestMapping(value = \"/api/v1/groups\")\n@RestController\npublic class GroupController {\n    private final GroupService service;\n    public GroupController(GroupService _gs) {\n        this.service = _gs;\n    }\n\n    /**\n     * @param dto\n     * @return\n     * @throws TypeNotPresentException\n     */\n    @PostMapping(path = \"/create\", consumes = \"application/json\", produces = \"application/json\")\n    public ResponseEntity<Group> CreateGroup(@RequestBody GroupCreateDto dto) throws TypeNotPresentException {\n        return new ResponseEntity<>(service.createGroup(dto), HttpStatus.CREATED);\n    }\n\n    /**\n     * @param dto\n     * @return\n     * @throws TypeNotPresentException\n     */\n    @PostMapping(path = \"/addUserToGroup\", consumes = \"application/json\", produces = \"application/json\")\n    public ResponseEntity<GroupXUser> CreateGroup(@RequestBody UserToGroupDto dto) throws TypeNotPresentException {\n        var user = service.addUserToGroup(dto);\n        if (user == null)\n            return new ResponseEntity<>(null, HttpStatus.LOOP_DETECTED);\n        return new ResponseEntity<>(user, HttpStatus.OK);\n    }\n\n    @PostMapping(path = \"/getUsers/{groupId}\", produces = \"application/json\")\n    public ResponseEntity<ArrayList<User>> GetUsersToGroup(@PathVariable long groupId) throws TypeNotPresentException {\n        return new ResponseEntity<>(service.getUsersToGroup(groupId), HttpStatus.OK);\n    }\n\n    @PostMapping(path = \"/getGroups\", produces = \"application/json\")\n    public ResponseEntity<GroupListDto> GetGroups(@PathVariable long groupId) throws TypeNotPresentException {\n        return new ResponseEntity<>(null, HttpStatus.OK);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/controller/GroupController.java b/backend/src/main/java/de/szut/backend/controller/GroupController.java
--- a/backend/src/main/java/de/szut/backend/controller/GroupController.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/controller/GroupController.java	(date 1652345393706)
@@ -42,19 +42,29 @@
      */
     @PostMapping(path = "/addUserToGroup", consumes = "application/json", produces = "application/json")
     public ResponseEntity<GroupXUser> CreateGroup(@RequestBody UserToGroupDto dto) throws TypeNotPresentException {
-        var user = service.addUserToGroup(dto);
+        GroupXUser user = null;
+        try {
+            user = service.addUserToGroup(dto);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return new ResponseEntity(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
+        }
         if (user == null)
             return new ResponseEntity<>(null, HttpStatus.LOOP_DETECTED);
         return new ResponseEntity<>(user, HttpStatus.OK);
     }
 
-    @PostMapping(path = "/getUsers/{groupId}", produces = "application/json")
+    @GetMapping(path = "/getUsers/{groupId}", produces = "application/json")
     public ResponseEntity<ArrayList<User>> GetUsersToGroup(@PathVariable long groupId) throws TypeNotPresentException {
         return new ResponseEntity<>(service.getUsersToGroup(groupId), HttpStatus.OK);
     }
 
-    @PostMapping(path = "/getGroups", produces = "application/json")
-    public ResponseEntity<GroupListDto> GetGroups(@PathVariable long groupId) throws TypeNotPresentException {
+    @GetMapping(path = "/getGroups/{userId}", produces = "application/json")
+    public ResponseEntity<GroupListDto> GetGroups(@PathVariable long userId) throws TypeNotPresentException {
+        GroupListDto groups = this.service.getGroups(userId);
+        if (groups != null && !groups.groups.isEmpty()) {
+            return new ResponseEntity<>(groups, HttpStatus.OK);
+        }
         return new ResponseEntity<>(null, HttpStatus.OK);
     }
 }
Index: backend/src/main/java/de/szut/backend/controller/SecurityQuestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/controller/SecurityQuestionController.java b/backend/src/main/java/de/szut/backend/controller/SecurityQuestionController.java
new file mode 100644
--- /dev/null	(date 1652345393708)
+++ b/backend/src/main/java/de/szut/backend/controller/SecurityQuestionController.java	(date 1652345393708)
@@ -0,0 +1,42 @@
+package de.szut.backend.controller;
+
+import de.szut.backend.dto.AddSecurityQuestionDto;
+import de.szut.backend.dto.SecurityQuestionDto;
+import de.szut.backend.service.SecurityQuestionService;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@Controller
+@CrossOrigin
+@RequestMapping(value = "/api/v1/securityQuestions")
+public class SecurityQuestionController {
+    private SecurityQuestionService securityQuestionService;
+    public SecurityQuestionController(SecurityQuestionService _securityQuestionService) {
+        this.securityQuestionService = _securityQuestionService;
+    }
+
+    @GetMapping(produces = "application/json")
+    public ResponseEntity<List<SecurityQuestionDto>> getSecurityQuestions() {
+        try {
+            return new ResponseEntity<>(securityQuestionService.getSecurityQuestions(), HttpStatus.CREATED);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return new ResponseEntity(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    @PostMapping(produces = "application/json", consumes = "application/json")
+    public ResponseEntity<SecurityQuestionDto> postSecurityQuestion(@RequestBody AddSecurityQuestionDto dto) {
+        try {
+            return new ResponseEntity<>(securityQuestionService.addSecurityQuestion(dto), HttpStatus.CREATED);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return new ResponseEntity(e.getMessage(), HttpStatus.BAD_REQUEST);
+        }
+    }
+
+}
Index: backend/src/main/java/de/szut/backend/service/SecurityQuestionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/SecurityQuestionService.java b/backend/src/main/java/de/szut/backend/service/SecurityQuestionService.java
new file mode 100644
--- /dev/null	(date 1652345393729)
+++ b/backend/src/main/java/de/szut/backend/service/SecurityQuestionService.java	(date 1652345393729)
@@ -0,0 +1,42 @@
+package de.szut.backend.service;
+
+import de.szut.backend.dto.AddSecurityQuestionDto;
+import de.szut.backend.dto.SecurityQuestionDto;
+import de.szut.backend.mapper.SecurityQuestionMapper;
+import de.szut.backend.model.SecurityQuestion;
+import de.szut.backend.repository.SecurityQuestionRepository;
+import org.springframework.stereotype.Service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+public class SecurityQuestionService extends BaseService {
+    private final SecurityQuestionRepository questionRepository;
+    private final SecurityQuestionMapper mapper;
+    public SecurityQuestionService(SecurityQuestionRepository _questionRepository,
+                                   SecurityQuestionMapper _mapper) {
+        this.questionRepository = _questionRepository;
+        this.mapper = _mapper;
+    }
+
+    public List<SecurityQuestionDto> getSecurityQuestions() throws Exception {
+        List<SecurityQuestionDto> dtoList = new ArrayList<>();
+        var securityQuestions = questionRepository.findAll();
+        if (securityQuestions.isEmpty()) {
+            throw new Exception("SecurityQuestions Table is empty!");
+        }
+        for (SecurityQuestion question: securityQuestions) {
+            dtoList.add(mapper.mapSecurityQuestionToSecurityQuestionDto(question));
+        }
+        return dtoList;
+    }
+
+    public SecurityQuestionDto addSecurityQuestion(AddSecurityQuestionDto dto) throws Exception {
+        SecurityQuestion question = mapper.mapAddSecurityQuestionDtoToSecurityQuestion(dto);
+        if (questionRepository.existsByKey(dto.key)) {
+            throw new Exception("SecurityQuestionKey already exists!");
+        }
+        return mapper.mapSecurityQuestionToSecurityQuestionDto(questionRepository.save(question));
+    }
+}
Index: backend/src/main/java/de/szut/backend/mapper/GroupMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.mapper;\n\nimport de.szut.backend.dto.GroupCreateDto;\nimport de.szut.backend.dto.UserToGroupDto;\nimport de.szut.backend.model.Group;\nimport de.szut.backend.model.GroupXUser;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class GroupMapper {\n    public Group mapGroupCreateDtoToGroup(GroupCreateDto dto) {\n        Group group = new Group();\n        group.groupName = dto.groupName;\n        return group;\n    }\n\n    public GroupXUser mapUserToGroup(UserToGroupDto dto) {\n        GroupXUser groupX = new GroupXUser();\n        groupX.groupId = dto.groupId;\n        groupX.userId = dto.groupId;\n        return groupX;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/mapper/GroupMapper.java b/backend/src/main/java/de/szut/backend/mapper/GroupMapper.java
--- a/backend/src/main/java/de/szut/backend/mapper/GroupMapper.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/mapper/GroupMapper.java	(date 1652345393717)
@@ -1,9 +1,11 @@
 package de.szut.backend.mapper;
 
 import de.szut.backend.dto.GroupCreateDto;
+import de.szut.backend.dto.GroupDto;
 import de.szut.backend.dto.UserToGroupDto;
 import de.szut.backend.model.Group;
 import de.szut.backend.model.GroupXUser;
+import de.szut.backend.model.Image;
 import org.springframework.stereotype.Service;
 
 @Service
@@ -17,7 +19,15 @@
     public GroupXUser mapUserToGroup(UserToGroupDto dto) {
         GroupXUser groupX = new GroupXUser();
         groupX.groupId = dto.groupId;
-        groupX.userId = dto.groupId;
+        groupX.userId = dto.userId;
         return groupX;
     }
+
+    public GroupDto mapGroupToGroupDto(Group group, String image) {
+        GroupDto dto = new GroupDto();
+        dto.setGroupName(group.groupName);
+        dto.setId(group.id);
+        dto.setImage(image);
+        return dto;
+    }
 }
Index: backend/src/main/java/de/szut/backend/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.model;\n\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.*;\nimport java.util.AbstractMap;\nimport java.util.Date;\n\n@Entity\n@Table(name=\"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    public long id;\n    public String lastName;\n    public String firstName;\n    public String email;\n    public Question securityQuestion;\n    public String securityAnswer;\n    public String salt;\n    public String hash;\n    @CreationTimestamp\n    public Date created;\n    @UpdateTimestamp\n    public Date lastUpdate;\n    public Date lastLogin;\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/User.java b/backend/src/main/java/de/szut/backend/model/User.java
--- a/backend/src/main/java/de/szut/backend/model/User.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/model/User.java	(date 1652345393723)
@@ -4,7 +4,6 @@
 import org.hibernate.annotations.UpdateTimestamp;
 
 import javax.persistence.*;
-import java.util.AbstractMap;
 import java.util.Date;
 
 @Entity
@@ -16,8 +15,9 @@
     public String lastName;
     public String firstName;
     public String email;
-    public Question securityQuestion;
+    public long securityQuestionId;
     public String securityAnswer;
+    public long imageId;
     public String salt;
     public String hash;
     @CreationTimestamp
Index: backend/src/main/java/de/szut/backend/service/ExpensesService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/ExpensesService.java b/backend/src/main/java/de/szut/backend/service/ExpensesService.java
new file mode 100644
--- /dev/null	(date 1652345393729)
+++ b/backend/src/main/java/de/szut/backend/service/ExpensesService.java	(date 1652345393729)
@@ -0,0 +1,45 @@
+package de.szut.backend.service;
+
+import de.szut.backend.model.Expenses.Expense;
+import de.szut.backend.repository.ExpensesRepository;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class ExpensesService {
+    private ExpensesRepository ex_Service;
+
+    public ExpensesService(ExpensesRepository ex_Service){
+        this.ex_Service = ex_Service;
+    }
+
+    public Expense createExpense(Expense expenseToCreate){
+        var inDB = ex_Service.findExpenseByGroupIdAndCategoryIdAndUserId(expenseToCreate.getGroupId(), expenseToCreate.getCategoryId(), expenseToCreate.getUserId());
+        if(inDB != null){
+            return inDB;
+        }
+        else
+            return this.ex_Service.save(expenseToCreate);
+    }
+
+    public List<Expense> getAllExpensesByGroupId(long groupId){
+        return this.ex_Service.findAllByGroupId(groupId);
+    }
+
+    public List<Expense> getAllExpensesByUserId(long userId){
+        return this.ex_Service.findAllByUserId(userId);
+    }
+
+    public List<Expense> getAllExpensesByCategoryId(long categoryId) {
+        return this.ex_Service.findAllByCategoryId(categoryId);
+    }
+
+    public Expense getExpenseById(long expenseId){
+        return this.ex_Service.findById(expenseId).get();
+    }
+
+    public void deleteExpenseById(long expenseId){
+        this.ex_Service.deleteById(expenseId);
+    }
+}
Index: backend/src/main/java/de/szut/backend/model/Categorys/dtos/GetCategoryDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Categorys/dtos/GetCategoryDTO.java b/backend/src/main/java/de/szut/backend/model/Categorys/dtos/GetCategoryDTO.java
new file mode 100644
--- /dev/null	(date 1652345393719)
+++ b/backend/src/main/java/de/szut/backend/model/Categorys/dtos/GetCategoryDTO.java	(date 1652345393719)
@@ -0,0 +1,11 @@
+package de.szut.backend.model.Categorys.dtos;
+
+import lombok.Data;
+
+import java.util.Date;
+
+@Data
+public class GetCategoryDTO {
+    private String name;
+    private Date date_Created;
+}
Index: backend/src/main/java/de/szut/backend/service/BaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.service;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class BaseService {\n    protected final Logger logger;\n    public BaseService() {\n        this.logger = LogManager.getLogger();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/BaseService.java b/backend/src/main/java/de/szut/backend/service/BaseService.java
--- a/backend/src/main/java/de/szut/backend/service/BaseService.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/service/BaseService.java	(date 1652345393728)
@@ -8,8 +8,9 @@
 @Service
 public class BaseService {
     protected final Logger logger;
+
     public BaseService() {
-        this.logger = LogManager.getLogger();
+        this.logger = LogManager.getLogger(this.getClass().getName());
     }
 
 }
Index: backend/src/main/java/de/szut/backend/model/Categorys/dtos/CreateCategoryDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Categorys/dtos/CreateCategoryDTO.java b/backend/src/main/java/de/szut/backend/model/Categorys/dtos/CreateCategoryDTO.java
new file mode 100644
--- /dev/null	(date 1652345393719)
+++ b/backend/src/main/java/de/szut/backend/model/Categorys/dtos/CreateCategoryDTO.java	(date 1652345393719)
@@ -0,0 +1,9 @@
+package de.szut.backend.model.Categorys.dtos;
+
+import lombok.Data;
+
+@Data
+public class CreateCategoryDTO {
+    private String name;
+    private long groupId;
+}
Index: backend/src/main/java/de/szut/backend/model/Categorys/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Categorys/Category.java b/backend/src/main/java/de/szut/backend/model/Categorys/Category.java
new file mode 100644
--- /dev/null	(date 1652345393718)
+++ b/backend/src/main/java/de/szut/backend/model/Categorys/Category.java	(date 1652345393718)
@@ -0,0 +1,20 @@
+package de.szut.backend.model.Categorys;
+
+import lombok.Data;
+import org.hibernate.annotations.CreationTimestamp;
+
+import javax.persistence.*;
+import java.util.Date;
+
+@Data
+@Entity
+@Table(name="Categories")
+public class Category {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private long categoryId;
+    private String name;
+    private long groupId;
+    @CreationTimestamp
+    private Date date_Created;
+}
Index: backend/src/main/java/de/szut/backend/model/Expenses/dtos/GetExpenseDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Expenses/dtos/GetExpenseDTO.java b/backend/src/main/java/de/szut/backend/model/Expenses/dtos/GetExpenseDTO.java
new file mode 100644
--- /dev/null	(date 1652345393721)
+++ b/backend/src/main/java/de/szut/backend/model/Expenses/dtos/GetExpenseDTO.java	(date 1652345393721)
@@ -0,0 +1,15 @@
+package de.szut.backend.model.Expenses.dtos;
+
+import lombok.Data;
+
+import java.util.Date;
+
+@Data
+public class GetExpenseDTO {
+    private long groupId;
+    private long userId;
+    private float amount;
+    private long categoryId;
+    private Date date_Created;
+    private String description;
+}
Index: backend/src/main/java/de/szut/backend/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.service;\n\nimport de.szut.backend.repository.UserRepository;\nimport org.apache.logging.log4j.LogManager;\nimport org.springframework.stereotype.Service;\nimport de.szut.backend.model.User;\nimport org.apache.logging.log4j.Logger;\n\nimport java.util.List;\n\n@Service\npublic class UserService extends BaseService {\n    private UserRepository userRepository;\n    public UserService(UserRepository _userRepository) {\n        super();\n        this.userRepository = _userRepository;\n    }\n\n    public List<User> GetAllUser() {\n\n        // Default Values\n        return userRepository.findAll();\n    }\n\n    public User getUserById(long id) {\n        return userRepository.findById(id).get();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/UserService.java b/backend/src/main/java/de/szut/backend/service/UserService.java
--- a/backend/src/main/java/de/szut/backend/service/UserService.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/service/UserService.java	(date 1652345393730)
@@ -12,7 +12,6 @@
 public class UserService extends BaseService {
     private UserRepository userRepository;
     public UserService(UserRepository _userRepository) {
-        super();
         this.userRepository = _userRepository;
     }
 
Index: backend/src/main/java/de/szut/backend/model/Expenses/dtos/CreateExpenseDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Expenses/dtos/CreateExpenseDTO.java b/backend/src/main/java/de/szut/backend/model/Expenses/dtos/CreateExpenseDTO.java
new file mode 100644
--- /dev/null	(date 1652345393720)
+++ b/backend/src/main/java/de/szut/backend/model/Expenses/dtos/CreateExpenseDTO.java	(date 1652345393720)
@@ -0,0 +1,12 @@
+package de.szut.backend.model.Expenses.dtos;
+
+import lombok.Data;
+
+@Data
+public class CreateExpenseDTO {
+    private long groupId;
+    private long userId;
+    private float amount;
+    private long categoryId;
+    private String description;
+}
Index: backend/src/main/java/de/szut/backend/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.repository;\n\nimport de.szut.backend.model.Question;\nimport de.szut.backend.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    User findByLastName(String lastName);\n    User findByFirstName(String firstName);\n    User findByEmail(String email);\n    User findByEmailAndSecurityQuestionAndSecurityAnswer(String email, Question question, String answer);\n    User findByEmailAndId(String email, long id);\n    boolean existsByEmail(String email);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/repository/UserRepository.java b/backend/src/main/java/de/szut/backend/repository/UserRepository.java
--- a/backend/src/main/java/de/szut/backend/repository/UserRepository.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/repository/UserRepository.java	(date 1652345393726)
@@ -1,6 +1,6 @@
 package de.szut.backend.repository;
 
-import de.szut.backend.model.Question;
+import de.szut.backend.model.SecurityQuestion;
 import de.szut.backend.model.User;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
@@ -10,7 +10,7 @@
     User findByLastName(String lastName);
     User findByFirstName(String firstName);
     User findByEmail(String email);
-    User findByEmailAndSecurityQuestionAndSecurityAnswer(String email, Question question, String answer);
+    User findByEmailAndSecurityQuestionIdAndSecurityAnswer(String email, long securityQuestionId, String answer);
     User findByEmailAndId(String email, long id);
     boolean existsByEmail(String email);
 
Index: backend/src/main/java/de/szut/backend/service/VerificationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.service;\n\nimport de.szut.backend.dto.*;\nimport de.szut.backend.mapper.UserMapper;\nimport de.szut.backend.model.*;\nimport de.szut.backend.model.History.HistoryActionToProcess;\nimport de.szut.backend.repository.UserRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.UUID;\n\n@Service\npublic class VerificationService extends BaseService {\n    UserRepository userRepository;\n    UserMapper userMapper;\n    HistoryLogService logService;\n\n    public VerificationService(UserRepository _userRepository, UserMapper _userMapper, HistoryLogService logService) {\n        this.userRepository = _userRepository;\n        this.userMapper = _userMapper;\n        this.logService = logService;\n    }\n\n    public User login(LoginDto dto) {\n        User user = this.userMapper.mapLoginDtoToUser(dto);\n        User queryUser = userRepository.findByEmail(user.email);\n        if (queryUser != null && hashPassword(user.hash + queryUser.salt).equals(queryUser.hash)) {\n            queryUser.lastLogin = new Date();\n            userRepository.save(queryUser);\n            //log(\"UserLoginSuccess\",queryUser.lastLogin.toString(),1);\n            return queryUser;\n        } else {\n            return null;\n        }\n    }\n\n    public ForgotBackDto forgotPassword(ForgotDto dto) {\n        var user =  userRepository.findByEmailAndSecurityQuestionAndSecurityAnswer(\n                dto.email,\n                dto.securityQuestion,\n                dto.securityAnswer.toLowerCase(Locale.ROOT));\n        if (user != null) {\n            user.salt = getSalt();\n            user.hash = hashPassword(user.hash + user.salt);\n            var newUser = userRepository.save(user);\n            return userMapper.mapUserToForgotBackDto(newUser);\n        } else {\n            return null;\n        }\n    }\n\n    public CreateUserDto register(RegisterDto dto) {\n        if (userRepository.existsByEmail(dto.email)) {\n            return new CreateUserDto();\n        }\n        this.logger.info(dto.toString());\n\n        User user = userMapper.mapRegisterDtoToUser(dto);\n        // Save User to Database with salt\n        user.salt = getSalt();\n        user.hash = hashPassword(user.hash + user.salt);\n\n\n        return userMapper.mapUserToUserCreateDto(this.userRepository.save(user));\n    }\n\n    private String hashPassword(String hash) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] encodedHash = digest.digest(\n                    hash.getBytes(StandardCharsets.UTF_16));\n            return bytesToHex(encodedHash);\n        }\n        catch (NoSuchAlgorithmException e) {\n            this.logger.error(e);\n        }\n\n        throw new RuntimeException(\"Hash couldn't generated!\");\n    }\n\n    private String getSalt() {\n        return UUID.randomUUID().toString();\n    }\n\n    private String bytesToHex(byte[] hash) {\n        StringBuilder hexString = new StringBuilder(2 * hash.length);\n        for (int i = 0; i < hash.length; i++) {\n            String hex = Integer.toHexString(0xff & hash[i]);\n            if(hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n\n    public User updatePassword(UpdateDto dto) {\n        var user = userRepository.findByEmailAndId(dto.email, dto.id);\n        user.salt = getSalt();\n        user.hash = hashPassword(dto.hash + user.salt);\n        return userRepository.save(user);\n\n    }\n    //Beispiel Implementierung für die Erstellung eines Log-Eintrags\n    private void log (String action, String addition, long groupId){\n        HistoryActionToProcess actionToProcess = new HistoryActionToProcess();\n        actionToProcess.setAction(action);\n        actionToProcess.setAdditionalInformation(addition);\n        actionToProcess.setGroupId(groupId);\n        logService.createLogEntry(actionToProcess);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/VerificationService.java b/backend/src/main/java/de/szut/backend/service/VerificationService.java
--- a/backend/src/main/java/de/szut/backend/service/VerificationService.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/service/VerificationService.java	(date 1652345393731)
@@ -4,6 +4,8 @@
 import de.szut.backend.mapper.UserMapper;
 import de.szut.backend.model.*;
 import de.szut.backend.model.History.HistoryActionToProcess;
+import de.szut.backend.repository.ImageRepository;
+import de.szut.backend.repository.SecurityQuestionRepository;
 import de.szut.backend.repository.UserRepository;
 import org.springframework.stereotype.Service;
 
@@ -16,14 +18,23 @@
 
 @Service
 public class VerificationService extends BaseService {
-    UserRepository userRepository;
-    UserMapper userMapper;
-    HistoryLogService logService;
+    private final UserRepository userRepository;
+    private final UserMapper userMapper;
+    private final HistoryLogService logService;
+    private final ImageRepository imageRepository;
+    private final SecurityQuestionRepository securityQuestionRepository;
 
-    public VerificationService(UserRepository _userRepository, UserMapper _userMapper, HistoryLogService logService) {
+
+    public VerificationService(UserRepository _userRepository,
+                               UserMapper _userMapper,
+                               HistoryLogService logService,
+                               ImageRepository _imageRepository,
+                               SecurityQuestionRepository _securityQuestionRepository) {
         this.userRepository = _userRepository;
         this.userMapper = _userMapper;
         this.logService = logService;
+        this.imageRepository = _imageRepository;
+        this.securityQuestionRepository = _securityQuestionRepository;
     }
 
     public User login(LoginDto dto) {
@@ -40,9 +51,9 @@
     }
 
     public ForgotBackDto forgotPassword(ForgotDto dto) {
-        var user =  userRepository.findByEmailAndSecurityQuestionAndSecurityAnswer(
+        User user =  userRepository.findByEmailAndSecurityQuestionIdAndSecurityAnswer(
                 dto.email,
-                dto.securityQuestion,
+                securityQuestionRepository.findByKey(dto.securityQuestionKey).getId(),
                 dto.securityAnswer.toLowerCase(Locale.ROOT));
         if (user != null) {
             user.salt = getSalt();
@@ -64,8 +75,10 @@
         // Save User to Database with salt
         user.salt = getSalt();
         user.hash = hashPassword(user.hash + user.salt);
-
-
+        Image image = new Image();
+        image.imageString = dto.image;
+        image = this.imageRepository.save(image);
+        user.imageId = image.id;
         return userMapper.mapUserToUserCreateDto(this.userRepository.save(user));
     }
 
Index: backend/src/main/java/de/szut/backend/model/Expenses/Expense.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/model/Expenses/Expense.java b/backend/src/main/java/de/szut/backend/model/Expenses/Expense.java
new file mode 100644
--- /dev/null	(date 1652345393719)
+++ b/backend/src/main/java/de/szut/backend/model/Expenses/Expense.java	(date 1652345393719)
@@ -0,0 +1,23 @@
+package de.szut.backend.model.Expenses;
+
+import lombok.Data;
+import org.hibernate.annotations.CreationTimestamp;
+
+import javax.persistence.*;
+import java.util.Date;
+
+@Data
+@Entity
+@Table(name="Expenses")
+public class Expense {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private long expensesId;
+    private long groupId;
+    private long userId;
+    private float amount;
+    private long categoryId;
+    private String description;
+    @CreationTimestamp
+    private Date date_Created;
+}
Index: backend/src/main/java/de/szut/backend/service/GroupService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.szut.backend.service;\n\nimport de.szut.backend.dto.GroupCreateDto;\nimport de.szut.backend.dto.UserToGroupDto;\nimport de.szut.backend.mapper.GroupMapper;\nimport de.szut.backend.model.Group;\nimport de.szut.backend.model.GroupXUser;\nimport de.szut.backend.model.User;\nimport de.szut.backend.repository.GroupRepository;\nimport de.szut.backend.repository.GroupXUserRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n@Service\npublic class GroupService extends BaseService {\n    private final GroupMapper mapper;\n    private final GroupRepository repo;\n    private final GroupXUserRepository groupXUserRepository;\n    private final UserService userService;\n    public GroupService(GroupMapper _mapper, GroupRepository _repo, GroupXUserRepository _groupXUserRepository, UserService _userService) {\n        super();\n        this.mapper = _mapper;\n        this.repo = _repo;\n        this.groupXUserRepository = _groupXUserRepository;\n        this.userService = _userService;\n    }\n\n    public Group createGroup(GroupCreateDto dto) {\n        var group = mapper.mapGroupCreateDtoToGroup(dto);\n        if (group.groupName.equals(\"\") || group.groupName.equals(null)) {\n            return null;\n        }\n        return repo.save(group);\n    }\n\n    public GroupXUser addUserToGroup(UserToGroupDto dto) {\n        var groupUser = mapper.mapUserToGroup(dto);\n        if (!groupXUserRepository.existsGroupXUserByUserIdAndGroupId(groupUser.userId, groupUser.groupId)) {\n            return groupXUserRepository.save(groupUser);\n        }\n        return null;\n    }\n\n    public ArrayList<User> getUsersToGroup(Long id) {\n        logger.info(id);\n        ArrayList<User> users = new ArrayList<>();\n        var userIds = groupXUserRepository.findAllByGroupId(id);\n        for (var userId: userIds) {\n            logger.info(userId);\n            users.add(userService.getUserById(userId.userId));\n        }\n        return users;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/de/szut/backend/service/GroupService.java b/backend/src/main/java/de/szut/backend/service/GroupService.java
--- a/backend/src/main/java/de/szut/backend/service/GroupService.java	(revision e48f53a1531501e780a36e68bc297a8d1a439e64)
+++ b/backend/src/main/java/de/szut/backend/service/GroupService.java	(date 1652345393729)
@@ -1,44 +1,61 @@
 package de.szut.backend.service;
 
 import de.szut.backend.dto.GroupCreateDto;
+import de.szut.backend.dto.GroupDto;
+import de.szut.backend.dto.GroupListDto;
 import de.szut.backend.dto.UserToGroupDto;
 import de.szut.backend.mapper.GroupMapper;
 import de.szut.backend.model.Group;
 import de.szut.backend.model.GroupXUser;
+import de.szut.backend.model.Image;
 import de.szut.backend.model.User;
 import de.szut.backend.repository.GroupRepository;
 import de.szut.backend.repository.GroupXUserRepository;
+import de.szut.backend.repository.ImageRepository;
 import org.springframework.stereotype.Service;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 
 @Service
 public class GroupService extends BaseService {
     private final GroupMapper mapper;
     private final GroupRepository repo;
     private final GroupXUserRepository groupXUserRepository;
+    private final ImageRepository imageRepository;
     private final UserService userService;
-    public GroupService(GroupMapper _mapper, GroupRepository _repo, GroupXUserRepository _groupXUserRepository, UserService _userService) {
-        super();
+    public GroupService(GroupMapper _mapper, GroupRepository _repo,
+                        GroupXUserRepository _groupXUserRepository,
+                        UserService _userService,
+                        ImageRepository _imageRepository) {
         this.mapper = _mapper;
         this.repo = _repo;
         this.groupXUserRepository = _groupXUserRepository;
         this.userService = _userService;
+        this.imageRepository = _imageRepository;
     }
 
     public Group createGroup(GroupCreateDto dto) {
         var group = mapper.mapGroupCreateDtoToGroup(dto);
+        Image image = new Image();
+        image.imageString = dto.image;
+        image = this.imageRepository.save(image);
+        group.imageId = image.id;
         if (group.groupName.equals("") || group.groupName.equals(null)) {
             return null;
         }
         return repo.save(group);
     }
 
-    public GroupXUser addUserToGroup(UserToGroupDto dto) {
+    public GroupXUser addUserToGroup(UserToGroupDto dto) throws Exception {
         var groupUser = mapper.mapUserToGroup(dto);
         if (!groupXUserRepository.existsGroupXUserByUserIdAndGroupId(groupUser.userId, groupUser.groupId)) {
-            return groupXUserRepository.save(groupUser);
+            if (repo.existsById(dto.groupId)) {
+                return groupXUserRepository.save(groupUser);
+            } else {
+                throw new Exception("GroupId was not found");
+            }
         }
         return null;
     }
@@ -53,4 +70,24 @@
         }
         return users;
     }
+
+    public GroupListDto getGroups(Long userId) {
+        GroupListDto groups = new GroupListDto();
+        groups.groups = new ArrayList<GroupDto>();
+        for (var x :groupXUserRepository.findAllByUserId(userId)) {
+            this.logger.info(x.groupId);
+            var tempGroup = repo.findById(x.groupId);
+            Group group = null;
+            if ( tempGroup.isPresent()) {
+                group = tempGroup.get();
+                this.logger.info(group);
+                String imageString = imageRepository.findById(group.imageId).get().imageString;
+                GroupDto dto = mapper.mapGroupToGroupDto(group, imageString);
+                groups.groups.add(dto);
+            }
+
+        }
+
+        return groups;
+    }
 }
